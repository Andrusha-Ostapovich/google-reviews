<?php

namespace Tests\Unit;

use GoogleReviews\GoogleReview;
use GuzzleHttp\Client;
use PHPUnit\Framework\TestCase;
use Symfony\Component\DomCrawler\Crawler;

class GoogleReviewTest extends TestCase
{
    // The tests are generated by AI, the library is unofficial
    protected $googleReview;
    protected $client;

    protected function setUp(): void
    {
        parent::setUp();

        $this->client = $this->createMock(Client::class);
        $this->googleReview = new GoogleReview();
    }

    public function testGetNextPageToken()
    {
        $html = '<div class="gws-localreviews__general-reviews-block" data-next-page-token="TOKEN123"></div>';
        $crawler = new Crawler($html);

        $token = $this->googleReview->getNextPageToken($crawler);

        $this->assertEquals('TOKEN123', $token);
    }

    public function testGetRating()
    {
        $html = '<span class="Aq14fc">4,5</span>';
        $crawler = new Crawler($html);

        $rating = $this->googleReview->getRating($crawler);

        $this->assertEquals(4.5, $rating);
    }

    public function testGetReviewsNames()
    {
        $html = '<div class="TSUbDb"><a>Name1</a></div><div class="TSUbDb"><a>Name2</a></div>';
        $crawler = new Crawler($html);

        $names = $this->googleReview->getReviewsNames($crawler);

        $this->assertEquals(['Name1', 'Name2'], $names);
    }

    public function testGetReviewsTexts()
    {
        $html = '<span jscontroller="MZnM8e"><span data-expandable-section>Review1</span></span>
                 <span jscontroller="MZnM8e"><span data-expandable-section>Review2</span></span>';
        $crawler = new Crawler($html);

        $texts = $this->googleReview->getReviewsTexts($crawler);

        $this->assertEquals(['Review1', 'Review2'], $texts);
    }

    public function testGetReviewsReply()
    {
        $html = '<div class="d6SCIc">Reply1</div><div class="d6SCIc">Reply2</div>';
        $crawler = new Crawler($html);

        $replys = $this->googleReview->getReviewsReply($crawler);

        $this->assertEquals(['Reply1', 'Reply2'], $replys);
    }

    public function testGetReviewsRatings()
    {
        $html = '<div class="lTi8oc z3HNkc" aria-label="Rated 5,0"></div>
                 <div class="lTi8oc z3HNkc" aria-label="Rated 4,5"></div>';
        $crawler = new Crawler($html);

        $ratings = $this->googleReview->getReviewsRatings($crawler);

        $this->assertEquals([5.0, 4.5], $ratings);
    }

    public function testGetProfilesUrls()
    {
        $html = '<div class="TSUbDb"><a href="profile1">Profile1</a></div>
                 <div class="TSUbDb"><a href="profile2">Profile2</a></div>';
        $crawler = new Crawler($html);

        $urls = $this->googleReview->getProfilesUrls($crawler);

        $this->assertEquals(['profile1', 'profile2'], $urls);
    }

    public function testGetReviewsAll()
    {
        $url = 'http://example.com';
        $html = '<div class="gws-localreviews__general-reviews-block" data-next-page-token="TOKEN123"></div>
                 <span jscontroller="MZnM8e"><span data-expandable-section>Review1</span></span>
                 <div class="TSUbDb"><a>Name1</a></div>';
        $crawler = new Crawler($html);

        $this->googleReview = $this->getMockBuilder(GoogleReview::class)
            ->onlyMethods(['getCrawlerObj', 'getReviews', 'getNextPageToken', 'getNextReviewsPage'])
            ->getMock();

        $this->googleReview->method('getCrawlerObj')->willReturn($crawler);
        $this->googleReview->method('getReviews')->willReturn([['name' => 'Name1', 'text' => 'Review1']]);
        $this->googleReview->method('getNextPageToken')->willReturn(null);

        $reviews = $this->googleReview->getReviewsAll($url);

        $this->assertCount(1, $reviews);
        $this->assertEquals('Name1', $reviews[0]['name']);
        $this->assertEquals('Review1', $reviews[0]['text']);
    }
}
